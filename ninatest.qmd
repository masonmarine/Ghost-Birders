```{r}
library(tidyverse)
```

```{r}
if (!requireNamespace("remotes", quietly = TRUE)) {
  install.packages("remotes")
}
remotes::install_github("ebird/ebirdst")

```

```{r}
library(fields)
library(rnaturalearth)
library(sf)
library(terra)
library(ebirdst)
set_ebirdst_access_key("lcjc4puu8sc1")
# download example data, tundra swan in nc
ebirdst_download_status(species = "tunswa")

# load relative abundance raster stack with 52 layers, one for each week
abd <- load_raster("tunswa", resolution = "27km")

# load species specific mapping parameters
pars <- load_fac_map_parameters("tunswa")
# custom coordinate reference system
crs <- st_crs(pars$custom_projection)
# legend breaks
breaks <- pars$weekly_bins
# legend labels for top, middle, and bottom
labels <- pars$weekly_labels

# the date that each raster layer corresponds to is stored within the labels
weeks <- as.Date(names(abd))
print(weeks)
```

```{r}
library(dplyr)
library(ebirdst)
library(fields)
library(ggplot2)
library(lubridate)
library(rnaturalearth)
library(sf)
library(terra)
library(tidyr)
extract <- terra::extract
set_ebirdst_access_key("lcjc4puu8sc1", overwrite = TRUE)

# download the tundra swan data
ebirdst_download_status("tunswa",
                        pattern = "abundance_full-year_mean")

# load seasonal mean relative abundance at 3km resolution
abd_year <- load_raster("tunswa", 
                            product = "abundance", 
                            period = "full-year",
                            metric = "mean",
                            resolution = "3km")

# extract just the breeding season relative abundance
#abd_breeding <- abd_seasonal[["breeding"]]
```

```{r}
plot(abd_year, axes = FALSE)
```

```{r}
# nc boundary
region_boundary <- ne_states(iso_a2 = "US") |> 
  filter(name == "North Carolina")

# project boundary to match raster data
region_boundary_proj <- st_transform(region_boundary, st_crs(abd_year))

# crop and mask to boundary of wyoming
abd_year_mask <- crop(abd_year, region_boundary_proj) |> 
  mask(region_boundary_proj)

# map the cropped data
plot(abd_year_mask, axes = FALSE)
```

```{r}
# find the centroid of the region
region_centroid <- region_boundary |> 
  st_geometry() |> 
  st_transform(crs = 4326) |> 
  st_centroid() |> 
  st_coordinates() |> 
  round(1)

# define projection
crs_laea <- paste0("+proj=laea +lat_0=", region_centroid[2],
                   " +lon_0=", region_centroid[1])

# transform to the custom projection using nearest neighbor resampling
abd_year_laea <- project(abd_year_mask, crs_laea, method = "near") |> 
  # remove areas of the raster containing no data
  trim()

# map the cropped and projected data
plot(abd_year_laea, axes = FALSE, breakby = "cases")
```

```{r}
# quantiles of non-zero values
v <- values(abd_year_laea, na.rm = TRUE, mat = FALSE)
v <- v[v > 0]
breaks <- quantile(v, seq(0, 1, by = 0.1))
# add a bin for 0
breaks <- c(0, breaks)

# status and trends palette
pal <- ebirdst_palettes(length(breaks) - 2)
# add a color for zero
pal <- c("#e6e6e6", pal)

# map using the quantile bins
plot(abd_year_laea, breaks = breaks, col = pal, axes = FALSE)
```

```{r}
# Export into raster 
writeRaster(abd_year_laea, "abd_year_laea.tif", overwrite=TRUE)
```
